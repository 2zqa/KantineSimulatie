2.5 a) De methodes zijn private omdat het de bedoeling is dat ze alleen intern gebruikt worden.
    b) Een HashMap is om twee objecten aan elkaar te linken. Als a en b aan elkaar gelinkt zijn, en ik vraag de waarde
       die bij a zit, zal ik b terugkrijgen.
       Bij een HashSet worden er geen objecten aan elkaar gelinkt, er wordt slechts een lijst van objecten opgeslagen.
       Alle objecten zijn ook uniek.
3.2 c) Omdat java een lege constructor zonder parameters voor je aanmaakt.
    d) Omdat de methodes volledig op zichzelf staan.
    e) Een constructor is vereist om een klasse te initialiseren. Als deze private is
       kan deze dus niet aangeroepen worden.
    h) Een statische methode kan niet niet-statische velden ophalen zonder eerst de klasse waar dat veld in staat te initialiseren.
    i) Nu is het geen constante meer.
4.1 c) Omdat er dan geen getter nodig is, dit is enigszins efficiÃ«nter

4.3 a) Nee, omdat een interface abstract en dan kunnen geen nieuwe instantie worden aangemaakt
    b) Nee, omdat het abstract is
    c) Nee
    d) Ja
    e) Ja
    f) Ja, omdat een interface abstract is. Er kunnen geen nieuwe instanties van worden aangemaakt
    g) Ja, zo is dat gedefinieerd.
    h) Met polymorfisme wordt bedoeld dat het dynamische type van een variabele ook een kind-klasse mag zijn
       van het statische type. Bijvoorbeeld: `Vijand persoon = new Zombie();`, waar Vijand de abstracte ouder-klasse is en Zombie de kind-klasse.
       Een voorbeeld met interfaces: Een klasse die een interface implementeert, dan is die klasse ook een instanceof de interface.
4.4 a) Ja, omdat het dan gebruikt wordt om te extenden en niet om de klasse zelf te gebruiken
    b) Ja, omdat Java dit vereist bij abstracte klassen
    c) Ja, de methodes implementeren uit de interface of de methodes uit de interface verwijderen
    d) Omdat een instantie variabele dan niet aangemaakt en veranderd kan worden
    e) final maakt een methode onuitbreidbaar, het kan niet overschreven worden. Wat bij abstracte methode ervoor zorgt dat deze niet gebruikt kunnen worden

6.4 a)"een factuur bevat factuurregels". In dit geval is "factuur" is de one-kant en "factuurregel" is de many-kant. Er zal een kolom "factuur_id" zijn in de tabel "factuurregel"
    e)Om herhalende groepen te voorkomen in de Database. En dit zorgt voor abstractie van de factuurregel